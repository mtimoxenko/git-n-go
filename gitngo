#!/bin/bash

# Function to display usage
usage() {
  echo "Usage: gitngo [file_path] [commit message]"
  echo "       file_path: The file or directory to add. If not specified, defaults to all changes ('.')."
  echo "       commit message: The commit message to use. If not specified, an AI-generated message is used."
  exit 1
}

# Check if the user requested help
if [[ "$1" == "--help" ]]; then
  usage
fi

# Check if this is a git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "NOT a git repository!"
    exit 1
fi

# Check for any changes (staged, unstaged, untracked)
if [ -z "$(git status --porcelain)" ]; then
  echo "No changes to commit. Exiting..."
  exit 0
fi

# Determine file path to add
file_path="."
if [ -n "$1" ]; then
  file_path="$1"
  shift # Remove the file path argument
fi


# If no commit message is provided, first check for OPENAI_API_KEY
if [ -z "$1" ]; then
  # Retrieve the API key from the environment variable
  api_key=$OPENAI_API_KEY

  # Check if the API key is not empty and valid (for simplicity, just checking it's not empty)
  if [ -n "$api_key" ]; then
      # The prompt you're sending to the API for generating a commit message
      PROMPT="Generate a concise, engaging commit message suitable for a git utility script aimed at developers. The message should motivate quick updates with a touch of humor. Ideally, keep it under 10 words to ensure it's catchy yet informative. Example: 'Quick fix, big impact'."

      # API call using curl to get the commit message
      commit_message=$(curl -s https://api.openai.com/v1/chat/completions \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d '{
          "model": "gpt-3.5-turbo",
          "messages": [
            {
              "role": "user",
              "content": "'"${PROMPT}"'"
            }
          ]
        }' | jq -r '.choices[0].message.content')

      # Remove quotes from the AI response if necessary
      commit_message=$(echo $commit_message | sed -e 's/^"//' -e 's/"$//')
  else
      # Use the predefined default commit message
      commit_message="[gitngo] default commit message"
  fi
else
  # Use the provided commit message
  commit_message="$*"
fi


# Add the specified files or all files if file_path is '.'
echo "Adding $file_path"
git add "$file_path"
if [ $? -ne 0 ]; then
  echo "Error: failed to add files."
  exit 1
fi


# Commit the changes
echo "Committing with message: $commit_message"
git commit -m "$commit_message"
if [ $? -ne 0 ]; then
  echo "Error: commit failed."
  exit 1
fi

# Push the commit to the origin's main branch
echo "Pushing to the origin's main branch"
git push -u origin main
if [ $? -ne 0 ]; then
  echo "Error: push failed."
  exit 1
fi

